
import java.util.Scanner;

/**
 * GameOfLife
 * Demonstrates the game of life multiplying and and dying
 * @author ethanzhou
 *April 24 2017
 */
public class Life {
	static Scanner br = new Scanner(System.in);
	static int[][] field = new int[10][10];
	static int i;
	static int n;
	static boolean k = true;
	public static void main(String[] args){
		do{
		if (n == 0){	
			for(i = 0; i < 10; i++){
				for(n = 0; n < 10; n++){
					System.out.print(field[i][n] = 0);
				}
				System.out.println();
			}
		}else{
			start();
			board();
		}
		}while(k == true);
	}
	
	
	/**
	 * This method gets input from user for which index they want to input a 1 into
	 */
	public static void start(){// making a method void prevents you from needing to return, so you could just call it when you need it to do something
		System.out.println("How many inputs do you want");
		int time = 0;
		int track = br.nextInt();
		do{
		System.out.println("please input coordiantes from 0 - 10");
		field[br.nextInt()][br.nextInt()] = 1;
		time++;
		}while(time < track);
		
	}
	
	
	/**
	 * This method creates the 2-D array that is able to access and keeps going through each index of the array when called.
	 * It calls the rules to update the new 2-D array and then prints it
	 */
	public static void board(){
		for(i = 0; i < 10; i++){
			for(n = 0; n < 10; n++){
				cellCheck(field[i][n]);
				System.out.print(field[i][n]);
					
			}
			System.out.println();
		}
		System.out.println("do you want to move to next gen (true/false)");
		k = br.nextBoolean();
	}
	
	
	/**
	 * this method is the rules for the game of life
	 * @param cell is the index for the 2-D array that is meant for the board
	 * @return returns the new 2-D array that has went threw the rules
	 */
	public static int cellCheck(int cell){
		for(int h = 1; h < i - 1; h++){
			for(int g = 1; g < n -1; g++){
				
				int neigh = 0;
				for(int k = -1; k <= 1; k++){
					for(int l = -1;  l <= 1; l++){
						neigh += field[i +k][n +l];
					}
				}	
				
				neigh -= field[i][n];
				if((field[i][n] == 1) && (neigh < 2)){
					field[i][n] = 0;
				}else if(field[i][n] == 1 && neigh > 3){
					field[i][n] = 0;
				}else if(field[i][n] == 0 && neigh == 3){
					field[i][n] = 1;
				}else if(field[i][n] == 1 && neigh == 3){
					field[i][n] = 1;
					System.out.println("input coordinates for brith");
					field[br.nextInt()][br.nextInt()];
				}else{
					field[i][n] = field[i][n];
				}
			}
		}
		
	
		//need to take out "|" because it doesn't work as an or
	
		return field[i][n];
	}
	
}
